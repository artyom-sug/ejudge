#include <iostream>
#include <algorithm>
using namespace std;

int n, p[2001];

bool NextPermutation(int* p, int n) {
	int cnt = 1;
	for (int i = 1; i < n; i++) {
		if (p[i - 1] >= p[i]) cnt++;
	}
	if (cnt == n) return false;
	else {
		for (int i = n; i < n * 2; i++) {
			p[i] = p[i % n];
		}
		int m = n * 2 - 1;
		while (p[m - 1] >= p[m]) m--;
		for (int i = 0; i < n; i++) {
			for (int j = m; j < n * 2 - 1 - i; j++) {
				if (p[j] > p[j + 1]) {
					swap(p[j], p[j + 1]);
				}
			}
		}
		for (int i = m; i < n * 2; i++) {
			if (p[i] > p[m - 1]) {
				swap(p[i], p[m - 1]);
				break;
			}
		}
		for (int i = 0; i < n; i++) {
			for (int j = m; j < n * 2 - 1 - i; j++) {
				if (p[j] > p[j + 1]) {
					swap(p[j], p[j + 1]);
				}
			}
		}
		return true;
	}
}

int main() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> p[i];
	}
	if (!NextPermutation(p, n)) cout << "Not exist";
	else {
		for (int i = n; i < n * 2; i++) {
			cout << p[i] << ' ';
		}
	}
}