#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

struct point {
	long long x, y;
}a[100000];

long long n;

long long rotate(point c, point a, point b) {
	return (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);
}

bool compare(point a, point b) {
	return (a.x < b.x) or (a.x == b.x and a.y < b.y);
}

int main() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i].x >> a[i].y;
	}
	sort(a, a + n, compare);
	vector<point> p{ {a[0].x, a[0].y}, {a[1].x, a[1].y} };
	for (int i = 2; i < n; i++) {
		while (p.size() > 1 and rotate(p[p.size() - 2], p.back(), a[i]) <= 0) {
			p.pop_back();
		}
		p.push_back(a[i]);
	}
	for (int i = n - 2, tmp = p.size() + 1; i >= 0; i--) {
		while (p.size() >= tmp and rotate(p[p.size() - 2], p.back(), a[i]) <= 0) {
			p.pop_back();
		}
		p.push_back(a[i]);
	}
	p.pop_back();
	long long res = 0;
	for (int i = 0; i < p.size(); i++) {
		int j = (i + 1) % p.size();
		res += p[i].x * p[j].y - p[j].x * p[i].y;
	}
	cout << abs(res) << endl;
}