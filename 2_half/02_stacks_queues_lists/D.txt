#include <iostream>
#include <stack>
#include <string>
#include <cmath>
#include <map>
#include <vector>
using namespace std;
#define llong long long

llong oper(llong x, llong y, char op) {
    switch (op) {
    case '+': return x + y;
    case '-': return x - y;
    case '*': return x * y;
    case '/': return x / y;
    case '^': return pow(x, y);
    default: return 0;
    }
}

bool isoperator(char c) {
    return c == '+' or c == '-' or c == '*' or c == '/' or c == '^' or c == '_';
}

int prior(char c) {
    if (c == '+' or c == '-') return 1;
    else if (c == '*' or c == '/') return 2;
    else if (c == '^') return 3;
    else if (c == '_') return 4;
    else return 0;
}

string postfix(const string& s) {
    stack<char> stk;
    string post;
    char c;
    for (size_t i = 0; i < s.size(); i++) {
        c = s[i];
        if (isdigit(c)) {
            while (i < s.size() and isdigit(s[i])) {
                post += s[i];
                i++;
            }
            post += ' ';
            i--;
        }
        else if (c == 'x' or c == 'y') {
            post += c;
            post += ' ';
        }
        else if (c == '(') {
            stk.push(c);
        }
        else if (c == ')') {
            while (!stk.empty() and stk.top() != '(') {
                post += stk.top();
                post += ' ';
                stk.pop();
            }
            if (!stk.empty()) stk.pop();
        }
        else if (isoperator(c)) {
            while (!stk.empty() and prior(stk.top()) >= prior(c)) {
                post += stk.top();
                post += ' ';
                stk.pop();
            }
            stk.push(c);
        }
    }
    while (!stk.empty()) {
        post += stk.top();
        post += ' ';
        stk.pop();
    }
    return post;
}

llong calc(const string& post, llong x, llong y) {
    stack<llong> res;
    size_t i = 0;
    while (i < post.size()) {
        if (isdigit(post[i])) {
            llong num = 0;
            while (i < post.size() and isdigit(post[i])) {
                num = num * 10 + (post[i] - '0');
                i++;
            }
            res.push(num);
        }
        else if (post[i] == 'x' or post[i] == 'y') {
            if (post[i] == 'x') res.push(x);
            else res.push(y);
            i++;
        }
        else if (post[i] == '_') {
            if (!res.empty()) {
                llong a = res.top();
                res.pop();
                res.push(-a);
            }
            i++;
        }
        else if (isoperator(post[i])) {
            if (res.size() >= 2) {
                llong b = res.top(); res.pop();
                llong a = res.top(); res.pop();
                res.push(oper(a, b, post[i]));
            }
            i++;
        }
        else i++;
    }
    return res.top();
}

int main() {
    string str;
    int n;
    cin >> str >> n;
    llong x, y;
    if (str[0] == '-') str[0] = '_';
    for (size_t i = 0; i < str.size() - 1; i++) {
        if (str[i] == '(' and str[i + 1] == '-') str[i + 1] = '_';
    }
    string post = postfix(str);
    for (int i = 0; i < n; i++) {
        cin >> x >> y;
        cout << calc(post, x, y) << endl;
    }
}