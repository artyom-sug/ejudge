#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

int n, q;
int start;
long long l, r, a;
vector<vector<int>> t(262144);

int bin_poisk(vector<int>& a, long long val) {
	int l = -1, r = a.size() - 1;
	while (l < r) {
		int m = (l + 1 + r) / 2;
		if (1ll * a[m] * a[m] <= 2 * 1ll * val * val) l = m;
		else r = m - 1;
	}
	if (r == -1) {
		if (a.empty()) return -1;
		return val * 2 > a[0] ? a[0] : -1;
	}
	else {
		if (a.size() > r + 1 and a[r + 1] < 2 * val) {
			long long tmp1 = abs(1ll * 2 * val * val - 1ll * a[r + 1] * a[r + 1]);
			long long tmp2 = abs(1ll * 2 * val * val - 1ll * a[r] * a[r]);
			return tmp1 < tmp2 ? a[r + 1] : a[r];
		}
		else return a[r];
	}
}

void merge(vector<int>& a, vector<int>& b, vector<int>& res) {
	int s1 = 0, s2 = 0;
	while (s1 < a.size() or s2 < b.size()) {
		if ((s1 < a.size()) and (s2 >= b.size() or a[s1] < b[s2])) {
			res.push_back(a[s1]);
			s1++;
		}
		else {
			res.push_back(b[s2]);
			s2++;
		}
	}
	return;
}

int get(int l, int r, int a) {
	r += start;
	l += start;
	int mx = 0;
	while (l <= r) {
		if (l % 2 == 1) {
			int tmp = bin_poisk(t[l], a);
			if (tmp != -1 and (mx == 0 or abs(2ll * a * a - 1ll * tmp * tmp) < abs(2ll * a * a - 1ll * mx * mx))) mx = tmp;
			l++;
		}
		if (r % 2 == 0) {
			int tmp = bin_poisk(t[r], a);
			if (tmp != -1 and (mx == 0 or abs(2ll * a * a - 1ll * tmp * tmp) < abs(2ll * a * a - 1ll * mx * mx))) mx = tmp;
			r--;
		}
		l /= 2;
		r /= 2;
	}
	return mx ? mx : -1;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cin >> n >> q;
	start = 1;
	while (start < n) start <<= 1;
	for (int i = 0; i < n; i++) {
		t[i + start].resize(1);
		cin >> t[i + start][0];
	}
	for (int i = start - 1; i > 0; i--) {
		t[i].clear();
		merge(t[i * 2], t[i * 2 + 1], t[i]);
	}
	for (int i = 0; i < q; i++) {
		cin >> l >> r >> a;
		cout << get(l - 1, r - 1, a) << endl;
	}
}
