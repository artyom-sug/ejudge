#include <iostream>
using namespace std;

int n, k, chest[25][25] = { 0 };

void QueenFilling(int n, int x, int y, int depth) {
    for (int i = x, j = y; i < n && j < n; i++, j++) {
        if (chest[i][j] == 0) chest[i][j] = depth;
    }
    for (int i = x, j = y; i >= 0 && j < n; i--, j++) {
        if (chest[i][j] == 0) chest[i][j] = depth;
    }
    for (int j = y; j < n; j++) {
        if (chest[x][j] == 0) chest[x][j] = depth;
    }
}

void QueenDelete(int n, int x, int y, int depth) {
    for (int i = x, j = y; i < n && j < n; i++, j++) {
        if (chest[i][j] == depth) chest[i][j] = 0;
    }
    for (int i = x, j = y; i >= 0 && j < n; i--, j++) {
        if (chest[i][j] == depth) chest[i][j] = 0;
    }
    for (int j = y; j < n; j++) {
        if (chest[x][j] == depth) chest[x][j] = 0;
    }
}

bool QueenPlacement(int n, int x) {
    if (x >= n) return true;
    for (int i = 0; i < n; i++) {
        if (chest[i][x] == 0) {
            QueenFilling(n, i, x, x + 1);
            if (QueenPlacement(n, x + 1)) return true;
            QueenDelete(n, i, x, x + 1);
        }
    }
    return false;
}

int main() {
    cin >> n >> k;
    chest[k - 1][0] = 1;
    QueenFilling(n, k - 1, 0, 1);
    if (QueenPlacement(n, 1)) { 
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (chest[i][j] == j + 1) cout << 'Q';
                else cout << '.';
            }
            cout << endl;
        }
    }
    return 0;
}
